#+TITLE: Emacs VHDL Tools

[[https://github.com/csantosb/vhdl-tools/blob/master/LICENSE][file:http://img.shields.io/badge/license-GNU%20GPLv3-blue.svg]]
[[http://stable.melpa.org/#/vhdl-tools][file:http://stable.melpa.org/packages/vhdl-tools-badge.svg]]
[[http://melpa.org/#/vhdl-tools][file:http://melpa.org/packages/vhdl-tools-badge.svg]]

This project provides useful VHDL support for Emacs in terms of navigation.

* Table of Contents                                 :TOC:
:PROPERTIES:
:VISIBILITY: all
:END:

 - [[#about][About]]
 - [[#install][Install]]
 - [[#setup][Setup]]
 - [[#use][Use]]
   - [[#headings][Headings]]
   - [[#custom-imenu][Custom Imenu]]
   - [[#custom-smartscan][Custom SmartScan]]
   - [[#jumping-around][Jumping around]]
   - [[#misc][Misc]]
 - [[#vorg-use][vOrg Use]]
   - [[#features][Features]]
   - [[#tangling][Tangling]]
 - [[#related-utilities][Related utilities]]
 - [[#coding][Coding]]
 - [[#configurations][Configurations]]
 - [[#license][License]]

* About

[[https://csantosb.github.io/blog/2015/12/23/vhdl-tools/][Vhdl-tools]] provides a minor mode intended to be used under [[https://guest.iis.ee.ethz.ch/~zimmi/emacs/vhdl-mode.html][vhdl-mode]].
It adds specific functionality on top of [[https://github.com/leoliu/ggtags][ggtags]], [[http://batsov.com/projectile/][projectile]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]] and
[[https://github.com/tj64/outshine][outshine]] to ease navigating vhdl sources. It expects a working setup of
=ggtags=, completing it with

  - Jumping into instances
  - Jump to upper level
  - Searching for references
  - Link and headings management
  - Custom use of =imenu=
  - Custom =smartscan=
  - Org / vhdl coupling

* Install

Manual installation: as usual, download it, add to path and require after
loading =vhdl-mode=

#+begin_src emacs-lisp
  (with-eval-after-load 'vhdl-mode
    (add-to-list 'load-path "...")
    (require 'vhdl-tools))
#+end_src

This package is available fom [[http://stable.melpa.org/#/vhdl-tools][Melpa]] too, you may install it by calling

#+begin_src emacs-lisp
  M-x package-install RET vhdl-tools
#+end_src

Then, activate the minor mode by completing the =vhdl-mode= hook.

#+begin_src emacs-lisp
  (add-hook 'vhdl-mode-hook
            (lambda ()
              (vhdl-tools-mode 1)))
#+end_src

When this minor mode is active, a lighter =#vhdl= will be shown in the mode line.

* Setup

=VHDL-tools= expects a correct setup of the packages it relies on

- configure [[https://github.com/leoliu/ggtags][ggtags]]
- setup [[https://github.com/bbatsov/projectile][projectile]] by putting it under version control with [[https://git-scm.com/][git]]

Then, if you plan to use [[https://github.com/tj64/outshine][outshine]] by setting =vhdl-tools-use-outshine= to
true, just don’t [[https://github.com/tj64/outshine#installation][forget]] to

#+begin_src example
  (require 'outshine)
  (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
#+end_src

before activating =vhdl-tools=. Remember to

#+begin_src example
  (add-to-list 'company-begin-commands 'outshine-self-insert-command)
#+end_src

otherwise =company= idle completion using the =capf= backed won’t [[https://github.com/tj64/outshine/issues/38][work]] (see
[[#related-utilities][Related utilities]] section below).

Additionally, setting =vhdl-tools-manage-folding= (off by default) to true will
allow auto folding when jumping around, and =vhdl-tools-recenter-nb-lines= will be
used as number of lines from top after jumping.

Finally, have a look at all customization possibilities with =M-x customize-group
vhdl-tools=.

* Use

** Headings

Following the status of the =vhdl-tools-use-outshine= flag (off by default),
when the mode is enabled, =vhdl-tools= will activate =outline-minor-mode=
locally and =outshine= globally, setting =vhdl-tools-outline-regexp= as the
regexp used to locate headings.

This enables using this kind of headings

#+begin_src example
  -- * Header Level 1

  -- ** Header Level 2
  MyInstance : MyComponent
      port map ( ...
#+end_src

to delimit code blocks.

Then, call =outshine-speed-command-help= to get an overview over the available
functionality and the keybindings. Additionally, the following keybinds are
provided to navigate headings

  + =C-c C-n=      get to next header
  + =C-c C-p=      get to previous header

Setting =vhdl-tools-manage-folding= (off by default) to true will allow auto
folding upon jumping.

Finally, to browse all headings use =imenu= as shown in next section.

** Custom Imenu

The following keybinds are made available to browse current buffer contents

  + =C-x c i m=    standard imenu
  + =C-x c i i=    instances
  + =C-x c i c=    components
  + =C-x c i p=    processes
  + =C-x c i SPC=  headings (with a prefix argument use ido instead)
  + =C-x c i a=    all items

** Custom SmartScan

Following the status of the =vhdl-tools-remap-smartscan= and
=vhdl-tools-use-outshine= flags (off by default), =vhdl-tools= will customize the
behaviour of =smartscan-symbol-go-forward= and =smartscan-symbol-go-backward=, so
that they manage folding/unfolding of section headings. This way, upon jumping,
only the relevant section is shown.

** Jumping around

The following keybinds are available

  + =C-c M-D=    jumps to the definition of symbol at point

    [[file:JumpDef.gif][JumpDef.gif]]

  + =C-c M-w=     store a link
  + =C-c M-y=     paste a link
  + =C-c M-j=     follows the link at point

    [[file:Links.gif][Links.gif]]

  + =C-c M-.=     jumps into the instance at point and move point to current signal

    [[file:JumpIntoInstance.gif][JumpIntoInstance.gif]]

  + =C-c M-a=     moves point to first appearance of symbol at point

    [[file:JumpFirst.gif][JumpFirst.gif]]

  + =C-c M-u=     jumps to upper hierarchy level

    [[file:JumpUpper.gif][JumpUpper.gif]]

Cursor will jump to the target if there is one, searching packages too. The ring
mark is push after jumping, so to get back, press =C-c C-p= or M-, (default binds
under =ggtags=) if corresponding definition has been found. Works better for files
with correct syntax: think =vhdl-beautify-buffer= before using =vhdl-tools=.

** Misc

+ =C-c M-b=    beautify current block (module, etc.)

* vOrg Use

** Features

Following the [[http://orgmode.org/worg/org-contrib/babel/intro.html][literate programming paradigm]], it is possible to [[http://orgmode.org/manual/Extracting-source-code.html][tangle]] an
[[http://orgmode.org/][org-mode]] file containing source code blocks to a source code file. This helps
documenting code, for example, and provides lots of other [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][benefits]].

In order to ease handling this workflow, this package defines an ancillary minor
mode called =vOrg= intended to be used along with org major mode. When this minor
mode is active, a lighter =vOrg= will be shown in the mode line.

To auto activate =vOrg=, one may hook org mode

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (when (and (buffer-file-name)
                         (file-exists-p (format "%s.vhd" (file-name-base
                                                          (buffer-file-name)))))
                (require 'vhdl-tools)
                (vhdl-tools-vorg-mode 1))))
#+end_src

Otherwise, it is to be enabled manually.

When the =vOrg= file exists it is possible to jump from the vhdl file to the =vOrg=
file -assuming its names are identical and only its extension changes- with help of

  + =C-C M-^=    jump from vhdl to =vOrg=

Once =vOrg= minor mode is active the following keys are made available

  + C-c M-,    jump from =vOrg= to vhdl
  + =C-c C-n=    get to next header
  + =C-c C-p=    get to previous header
  + =C-c v t=    tangle =vOrg= file and beautify resulting buffer
  + =C-c M-b=    beautify code block at point

Setting =vhdl-tools-manage-folding= (off by default) to true will allow auto
folding upon jumping.

Finally, when editing source code blocks in the =vOrg= file, the minor mode will
auto set proper indentation, whitespace fixup and alignment of source code.

** Tangling

Org mode includes special infrastructure to tangle org files containing source
code. As explained in the org [[https://www.gnu.org/software/emacs/manual/html_node/org/comments.html#comments][manual]], extra comments may be inserted in the
tangled code file. In particular, the “comments:link” option provides pointers
back to the original org file, as a reference for jumping back and forth between
=vorg= and =vhdl=. This behaviour is activated by setting the
=vhdl-tools-tangle-comments-link= flag. Otherwise, only code is extracted from the
=vOrg= file.

Additionally, the variables =vhdl-tools-vorg-tangle-comment-format-beg= and
=vhdl-tools-vorg-tangle-comment-format-end= are used to format inserted
comments in tangled code files.

Once the code is tangled from the =vorg= file, the reference comments around in
the source =vhdl= file may be put out of sight with help of

#+begin_src emacs-lisp
  (add-hook 'vhdl-mode-hook #'vhdl-tools--cleanup-tangled)
#+end_src

Note that even if the =vhdl-tools-tangle-comments-link= flag is not set, the
jumping features in =vOrg= minor mode may be used, except that in this case, a
regular text search of text in current file is used to locate the point to jump
to.

* Related utilities

Some additional emacs packages useful in this context

- [[https://github.com/mickeynp/smart-scan][smart scan]] :: Jumps between other symbols found at point in Emacs
- [[https://github.com/Malabarba/beacon][beacon]] :: A light that follows your cursor around so you don't lose it!
- [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] :: Emacs minor mode that keeps your code always
     indented. More reliable than electric-indent-mode
- [[https://github.com/sh-ow/vhdl-capf][VDHL capf]] :: emacs completion at point function (capf) backend for use with [[https://company-mode.github.io/][company]]

* Coding

Sparse list of projects intended at improving coding

- [[https://github.com/VHDLTool/VHDLHandbook][VHDLHandbook]]

* Configurations

For an example configuration, see my [[http://csantosb.pw:5003/emacs.cat/org-config.cat/csb-vhdl][personal]] setup.

* License

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
